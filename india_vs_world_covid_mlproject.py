# -*- coding: utf-8 -*-
"""India_vs_World_COVID MLproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MGcF0_QCiwGUKH1jsPy2PP-m8hLVPzxI

##Importing all the necessary libraries
"""

#Importing the required libraries
import pandas as pd

#Visualisation libraries
import matplotlib.pyplot as plt
#%matplotlib inline
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import folium
from folium import plugins

#Diable the current warnings
import warnings
warnings.filterwarnings('ignore')

#Manipulating the default plot size
plt.rcParams['figure.figsize'] = 10, 12

#Learn how to read a .xls file by creating a dataframe using pandas
#Reading the datasets

df = pd.read_excel('Covid cases in India.xlsx')
df_india = df.copy()
print(df)

#Coordinates of Indian States and Union Territories
India_coord = pd.read_excel('Indian Coordinates.xlsx')
print(India_coord)

#Day by day data of India, Korea, Italy and Wuhan
dbd_India = pd.read_excel('per_day_cases.xlsx',parse_dates=True, sheet_name='India')
dbd_Italy = pd.read_excel('per_day_cases.xlsx',parse_dates=True, sheet_name="Italy")
dbd_Korea = pd.read_excel('per_day_cases.xlsx',parse_dates=True, sheet_name="Korea")
dbd_Wuhan = pd.read_excel('per_day_cases.xlsx',parse_dates=True, sheet_name="Wuhan")

#Total cases is the total nuber of cases (Indian National + Foregin National)
df.drop(['S. No.'],axis=1,inplace=True)
df['Total cases'] = df['Total Confirmed cases (Indian National)'] + df['Total Confirmed cases ( Foreign National )']
total_cases = df['Total cases'].sum()
print('\nTotal number of confirmed COVID 2019 cases across India till date (22nd March, 2020):', total_cases)

df.style.background_gradient(cmap = 'Greens')

#Total Active is total cases - (Number of death + Cured)
df['Total Active'] = df['Total cases'] - (df['Death']+ df['Cured'])
total_active = df['Total Active'].sum()
print('Total number number of active cases across India = ', total_active)

tot_cases = df.groupby('Name of State / UT')['Total Active'].sum().sort_values(ascending=False).to_frame()
tot_cases.style.background_gradient(cmap='Greens')

#learn how to use folium to create a zoomable map
 df_fullmap = pd.merge(India_coord, df, on='Name of State / UT')
 map = folium.Map(location=[30, 100], zoom_start=4, tiles='Stamenterrain')

for lat, lon, value, name in zip(df_fullmap['Latitude'], df_fullmap['Longitude'], df_fullmap['Total cases'], df_fullmap['Name of State / UT']):
  folium.CircleMarker([lat, lon],
      radius=value*0.7,
    popup=('<strong>State/strong>: ' +str(name).capitalize() + '<br>''<strong>Total Cases</strong>: ' + str(value) + '<br>'),
    color='red',
    fill_color='red',
    fill_opacity=0.2 ).add_to(map)    
map


# # Learn how to use folium to create a zoomable map
# df_full = pd.merge(India_coord,df,on='Name of State / UT')
# map = folium.Map(location=[20, 70], zoom_start=4,tiles='Stamenterrain')

# for lat, lon, value, name in zip(df_full['Latitude'], df_full['Longitude'], df_full['Total cases'], df_full['Name of State / UT']):
#     folium.CircleMarker([lat, lon], 
#                         radius=value*0.8, 
#                         popup = ('<strong>State</strong>: ' + str(name).capitalize() + '<br>''<strong>Total Cases</strong>: ' + str(value) + '<br>'),
#                         color='red',
#                         fill_color='red',
#                         fill_opacity=0.3 ).add_to(map)
# map

